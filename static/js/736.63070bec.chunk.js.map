{"version":3,"file":"static/js/736.63070bec.chunk.js","mappings":"0OAEaA,EAAWC,EAAAA,EAAAA,GAAH,kJAQRC,EAAWD,EAAAA,EAAAA,GAAH,wOASRE,EAAYF,EAAAA,EAAAA,IAAH,8EAMTG,EAAgBH,EAAAA,EAAAA,EAAH,2GAObI,EAAqBJ,EAAAA,EAAAA,EAAH,oEAKlBK,EAAcL,EAAAA,EAAAA,IAAH,wC,gDCWxB,EAlCa,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAKA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,GAASO,MAAK,SAAAC,GAAG,OAAIJ,EAAaI,QAChD,CAACR,KAGF,8BACGG,IACC,SAAC,KAAD,WACE,SAACV,EAAD,UACGU,EAAUM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,UAApB,OACb,UAAClB,EAAD,WACGiB,GACC,SAAChB,EAAD,CACEkB,IAAI,QACJC,IAAG,0CAAqCH,MAG1C,SAACb,EAAD,CAAagB,IAAKC,KAGpB,SAACnB,EAAD,UAAgBc,KAChB,SAACb,EAAD,UAAqBe,MAXRH,c,0MCzB7BO,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAgB,mCAAG,oGACDF,IAAAA,IAAA,qCAAwCC,IADvC,cACxBE,EADwB,yBAEvBA,EAAeC,KAAKC,QAAQb,KAAI,kBAAiC,CACtEc,IADqC,EAAGC,YAExCd,GAFqC,EAAgBA,GAGrDe,MAHqC,EAAoBA,WAF7B,2CAAH,qDAShBC,EAAiB,mCAAG,WAAMC,GAAN,uFACJV,IAAAA,IAAA,+BACDC,EADC,kBACYS,IAFR,cACzBC,EADyB,yBAIxBA,EAAaP,KAAKC,QAAQb,KAAI,kBAAiC,CACpEc,IADmC,EAAGC,YAEtCd,GAFmC,EAAgBA,GAGnDe,MAHmC,EAAoBA,WAJ1B,2CAAH,sDAWjBI,EAAkB,mCAAG,WAAMnB,GAAN,qGACJO,IAAAA,IAAA,gBAAmBP,EAAnB,oBAAiCQ,IAD7B,cAC1BY,EAD0B,SAG9BA,EAAcT,KADRI,EAFwB,EAExBA,MAAOM,EAFiB,EAEjBA,OAAQC,EAFS,EAETA,SAAUR,EAFD,EAECA,YAAaS,EAFd,EAEcA,aAExCC,EAAY,CAChBT,MAAAA,EACAM,OAAAA,EACAC,SAAAA,EACApB,MAAOY,EACPW,MAAOF,GATuB,kBAYzBC,GAZyB,2CAAH,sDAelB5B,EAAc,mCAAG,WAAMI,GAAN,uFACJO,IAAAA,IAAA,gBAAmBP,EAAnB,4BAAyCQ,IADrC,cACtBf,EADsB,yBAErBA,EAAUkB,KAAKe,KAAK3B,KAAI,kBAA4C,CACzEC,GAD6B,EAAGA,GAEhCC,KAF6B,EAAOA,KAGpCC,MAH6B,EAAayB,aAI1CxB,UAJ6B,EAA2BA,eAF9B,2CAAH,sDAUdyB,EAAiB,mCAAG,WAAM5B,GAAN,uFACJO,IAAAA,IAAA,gBAAmBP,EAAnB,4BAAyCQ,IADrC,cACzBqB,EADyB,yBAExBA,EAAalB,KAAKC,QAAQb,KAAI,kBAA8B,CACjEC,GADmC,EAAGA,GAEtC8B,OAFmC,EAAOA,OAG1CC,QAHmC,EAAeA,aAFrB,2CAAH,uD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin-top: -10px;\n  margin-left: -10px;\n  padding: 20px;\n`;\nexport const CastItem = styled.li`\n  margin-left: 10px;\n  margin-top: 10px;\n  flex-basis: calc(20% - 10px);\n\n  box-shadow: 0 1px 1px rgb(0 0 0 / 12%), 0 4px 4px rgb(0 0 0 / 6%),\n    1px 4px 6px rgb(0 0 0 / 16%);\n  padding-bottom: 10px;\n`;\nexport const CastImage = styled.img`\n  display: block;\n  margin: 0 auto;\n  width: 100%;\n`;\n\nexport const CastNameTitle = styled.p`\n  color: #3f51b5;\n  font-size: 20px;\n  margin-top: 10px;\n  text-align: center;\n`;\n\nexport const CastCharacterTitle = styled.p`\n  text-align: center;\n  margin-top: 10px;\n`;\n\nexport const CastNoImage = styled.img`\n  width: 100%;\n`;\n","import { useState, useEffect } from 'react';\nimport {\n  CastList,\n  CastItem,\n  CastImage,\n  CastNameTitle,\n  CastCharacterTitle,\n  CastNoImage,\n} from './Cast.styled';\nimport { fetchMovieCast } from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport { Container } from 'components/Header/Header.styled';\nimport imageno from '../../image/noimage.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState(null);\n  useEffect(() => {\n    fetchMovieCast(movieId).then(res => setMovieCast(res));\n  }, [movieId]);\n\n  return (\n    <>\n      {movieCast && (\n        <Container>\n          <CastList>\n            {movieCast.map(({ id, name, image, character }) => (\n              <CastItem key={id}>\n                {image ? (\n                  <CastImage\n                    alt=\"title\"\n                    src={`https://image.tmdb.org/t/p/w300/${image}`}\n                  />\n                ) : (\n                  <CastNoImage src={imageno} />\n                )}\n\n                <CastNameTitle>{name}</CastNameTitle>\n                <CastCharacterTitle>{character}</CastCharacterTitle>\n              </CastItem>\n            ))}\n          </CastList>\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '092a845a33f61eebb0542bc73fc3415f';\n\nexport const fetchGetTrending = async () => {\n  const trendingMovies = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  return trendingMovies.data.results.map(({ poster_path, id, title }) => ({\n    img: poster_path,\n    id,\n    title,\n  }));\n};\n\nexport const fetchSearchMovies = async query => {\n  const searchMovies = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}`\n  );\n  return searchMovies.data.results.map(({ poster_path, id, title }) => ({\n    img: poster_path,\n    id,\n    title,\n  }));\n};\n\nexport const fetchDetailsMovies = async id => {\n  const moviesDetails = await axios.get(`movie/${id}?api_key=${KEY}`);\n  const { title, genres, overview, poster_path, vote_average } =\n    moviesDetails.data;\n  const movieInfo = {\n    title,\n    genres,\n    overview,\n    image: poster_path,\n    score: vote_average,\n  };\n\n  return movieInfo;\n};\n\nexport const fetchMovieCast = async id => {\n  const movieCast = await axios.get(`movie/${id}/credits?api_key=${KEY}`);\n  return movieCast.data.cast.map(({ id, name, profile_path, character }) => ({\n    id,\n    name,\n    image: profile_path,\n    character,\n  }));\n};\n\nexport const fetchMovieReviews = async id => {\n  const movieReviews = await axios.get(`movie/${id}/reviews?api_key=${KEY}`);\n  return movieReviews.data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n"],"names":["CastList","styled","CastItem","CastImage","CastNameTitle","CastCharacterTitle","CastNoImage","movieId","useParams","useState","movieCast","setMovieCast","useEffect","fetchMovieCast","then","res","map","id","name","image","character","alt","src","imageno","axios","KEY","fetchGetTrending","trendingMovies","data","results","img","poster_path","title","fetchSearchMovies","query","searchMovies","fetchDetailsMovies","moviesDetails","genres","overview","vote_average","movieInfo","score","cast","profile_path","fetchMovieReviews","movieReviews","author","content"],"sourceRoot":""}